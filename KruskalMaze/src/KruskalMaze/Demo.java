/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package KruskalMaze;

import java.util.Random;
import java.util.*;

public class Demo extends javax.swing.JFrame {

    public static final int N = 1;
    public static final int S = 2;
    public static final int E = 4;
    public static final int W = 8;

    public static final int MAX_WIDTH = 10;
    public static final int MAX_HEIGHT = 10;

    protected Random random = null;
    protected Long seed = null; 
    protected int w = 10;
    protected int h = 10;
    protected int[][] grid = null;
    
    private List<List<Tree>> sets;
    private Stack<Edge> edges;
    
        
    public Demo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mazePanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kruskal Maze Generator/Solver");

        mazePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout mazePanelLayout = new javax.swing.GroupLayout(mazePanel);
        mazePanel.setLayout(mazePanelLayout);
        mazePanelLayout.setHorizontalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mazePanelLayout.setVerticalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 411, Short.MAX_VALUE)
        );

        jButton1.setText("Generate random");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 565, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        System.out.println("Initilizing maze...");
        
        random = new Random();
        
        grid = new int[h][w];
	for ( int j=0; j < h; ++j ) {
		for ( int i=0; i < w; ++i ) {
			grid[j][i] = 0;
		}
	}
        
        System.out.print(" ");
	for ( int i=0; i < (w*2 - 1); ++i ) {
		System.out.print("_");
	}
	System.out.println("");

	// draw test
        draw();
        
        
        sets = new ArrayList<List<Tree>>();
	for ( int y=0; y < h; ++y ) {
		List<Tree> tmp = new ArrayList<Tree>();
		for ( int x=0; x < w; ++x ) {
			tmp.add(new Tree());
		}
		sets.add(tmp);
	}
		
	edges = new Stack<Edge>();
	for ( int y=0; y < h; ++y ) {
		for (int x=0; x < w; ++x ) {
			if ( y > 0 ) 	{ edges.add(new Edge(x,y,N)); }
			if ( x > 0 ) 	{ edges.add(new Edge(x,y,W)); }
		}
	}
	
        for ( int i=0; i < edges.size(); ++i ) {
            int pos = random.nextInt(edges.size());
            Edge tmp1 = edges.get(i);
            Edge tmp2 = edges.get(pos);
            edges.set(i,tmp2);
            edges.set(pos,tmp1);
	}
  
        
        // kruskal
        while ( edges.size() > 0 ) {
            Edge tmp = edges.pop();
            int x = tmp.getX();
            int y = tmp.getY();
            int direction = tmp.getDirection();
            int dx = x + DX(direction), dy = y + DY(direction);
			
            Tree set1 = (sets.get(y)).get(x);
            Tree set2 = (sets.get(dy)).get(dx);
			
            if ( !set1.connected(set2) ) {		
                set1.connect(set2);
		grid[y][x] |= direction;
		grid[dy][dx] |= oppositeOf(direction);
            }
	}
 
        // draw test
        draw();
    }//GEN-LAST:event_jButton1MouseClicked

    public static int DX(int direction) {
		switch ( direction ) {
		case E:
			return +1;
		case W:
			return -1;
		case N:
		case S:
			return 0;
		}
		return -1;
	}

	public static int DY(int direction) {
		switch ( direction ) {
		case E:
		case W:
			return 0;
		case N:
			return -1;
		case S:
			return 1;
		}
		return -1;
	}

	public static int oppositeOf(int direction) {
		switch ( direction ) {
		case E:
			return W;
		case W:
			return E;
		case N:
			return S;
		case S:
			return N;
                }
		return -1;
	}
    
    public void draw() {
		// Draw the "top row" of the maze
		System.out.print((char)27 + "[H");
		System.out.print(" ");
		for ( int i=0; i < (w*2) - 1; ++i ) {
			System.out.print("_");
		}
		System.out.println("");
		
		// Step through the grid/maze, cell-by-cell
		for ( int y=0; y < grid.length; ++y ) {
			System.out.print("|");
			for ( int x=0; x < grid[0].length; ++x ) {
				// Start coloring, if unconnected
				//if ( grid[y][x] == 0 ) 	{ System.out.print((char)27 + "[47m"); }
				
				System.out.print( ((grid[y][x] & S) != 0) ? " " : "_" );
				if ( (grid[y][x] & E) != 0 ) {
					System.out.print( (((grid[y][x] | grid[y][x+1]) & S) != 0) ? " " : "_" );
				} else {
					System.out.print("|");
				}
				
				// Stop coloring, if unconnected
				if ( grid[y][x] == 0 ) 	{ System.out.print((char)27 + "[m"); }
			}
			System.out.println("");
		}
                
                //draw graphics
                int startX = 10;
                int startY = 10;
                mazePanel.getGraphics().drawLine(0, 0, 10, 10);
                for ( int i=0; i < (w*2) - 1; i++ ) {
			mazePanel.getGraphics().drawLine(startX + (i*10), startY, 10, 10);
		}
                
                for ( int y=0; y < grid.length; ++y ) {
			System.out.print("|");
                        mazePanel.getGraphics().drawLine(startX, startY + (y*10), 10, 10);
			for ( int x=0; x < grid[0].length; ++x ) {
				// Start coloring, if unconnected
				//if ( grid[y][x] == 0 ) 	{ System.out.print((char)27 + "[47m"); }
				
				System.out.print( ((grid[y][x] & S) != 0) ? " " : "_" );
				if ( (grid[y][x] & E) != 0 ) {
					System.out.print( (((grid[y][x] | grid[y][x+1]) & S) != 0) ? " " : "_" );
				} else {
					System.out.print("|");
				}
				
				// Stop coloring, if unconnected
				if ( grid[y][x] == 0 ) 	{ System.out.print((char)27 + "[m"); }
			}
			System.out.println("");
		}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Demo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Demo().setVisible(true);
            }
        });
    }
    
    class Tree {
	private Tree parent = null;
	public Tree() {
		
	}
	public Tree root() {
		return parent != null ? parent.root() : this;
	}

	public boolean connected(Tree tree) {
		return this.root() == tree.root();
	}
        
	public void connect(Tree tree) {
		tree.root().setParent(this);
	}

	public void setParent(Tree parent) {
		this.parent = parent;
	}
    }
    
    class Edge {
	private int x;
	private int y;
	private int direction;
	
	public Edge(int x, int y, int direction) {
		this.x = x; 
		this.y = y;
		this.direction = direction;
	}
	
	public int getX() { return x; }
	public int getY() { return y; }
	public int getDirection() { return direction; }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel mazePanel;
    // End of variables declaration//GEN-END:variables
}
